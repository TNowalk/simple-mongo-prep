{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["DataValue","type","raw","isAltered","value","this","Number","MAX_SAFE_INTEGER","isSafeInteger","isInteger","Math","abs","App","ref","createRef","useState","input","setInput","output","setOutput","useEffect","processed","processInput","Array","i","l","length","isArray","key","JSON","parse","console","log","buildOutput","depth","out","push","padStart","o","Object","keys","s","slice","join","err","className","Container","Grid","columns","Row","Column","Form","TextArea","rows","placeholder","onChange","e","d","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3fb38466.chunk.js","sourcesContent":["import React, { useState, useEffect, createRef } from \"react\";\nimport \"./App.css\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Container, Grid, Form, TextArea } from \"semantic-ui-react\";\n\nif (!Number.MAX_SAFE_INTEGER) {\n  Number.MAX_SAFE_INTEGER = 9007199254740991; // Math.pow(2, 53) - 1;\n}\nNumber.isSafeInteger =\n  Number.isSafeInteger ||\n  function (value) {\n    return (\n      Number.isInteger(value) && Math.abs(value) <= Number.MAX_SAFE_INTEGER\n    );\n  };\n\n/*\n[\n    {\n        \"cbsaDescription\": \"Anchorage\",\n        \"cbsaTypeLookup\": 1,\n        \"state\": \"AK\",\n        \"stateName\": \"Alaska\",\n        \"cbsaCode\": 11260\n    },\n    {\n        \"cbsaDescription\": \"Fairbanks\",\n        \"cbsaTypeLookup\": 1,\n        \"state\": \"AK\",\n        \"stateName\": \"Alaska\",\n        \"cbsaCode\": 21820\n    }\n]\n*/\n\nfunction DataValue(type, raw, isAltered, value) {\n  this.type = type;\n  this.raw = raw;\n  this.isAltered = isAltered;\n  this.value = value;\n}\n\nfunction processInput(input) {\n  if (input instanceof Array) {\n    for (let i = 0, l = input.length; i < l; i++) {\n      input[i] = processInput(input[i]);\n    }\n  } else if (typeof input === \"object\" && !Array.isArray(input)) {\n    for (let key in input) {\n      input[key] = processInput(input[key]);\n    }\n  } else {\n    let type = typeof input;\n    if (type === \"number\") {\n      if (Number.isSafeInteger(input)) {\n        return new DataValue(type, input, true, `NumberInt(${input})`);\n      } else {\n        return new DataValue(type, input, false, input);\n      }\n    } else {\n      return new DataValue(type, input, false, input);\n    }\n  }\n\n  return input;\n}\n\nfunction buildOutput(output, depth = 0) {\n  let out = [];\n  if (output instanceof Array) {\n    out.push(\"[\".padStart(1 + depth * 4, \" \"));\n    for (let i = 0, l = output.length; i < l; i++) {\n      if (!(output[i] instanceof DataValue)) {\n        out = [...out, ...buildOutput(output[i], depth + 1)];\n      } else {\n        let o = buildOutput(output[i], depth + 1);\n        out.push(o.padStart(o.length + (depth + 1) * 4));\n      }\n\n      if (i < l - 1) {\n        out[out.length - 1] += \",\";\n      }\n    }\n    out.push(\"]\".padStart(1 + depth * 4, \" \"));\n  } else if (\n    typeof output === \"object\" &&\n    !Array.isArray(output) &&\n    !(output instanceof DataValue)\n  ) {\n    out.push(\"{\".padStart(1 + depth * 4, \" \"));\n    if (Object.keys(output).length) {\n      for (let key in output) {\n        let o = buildOutput(output[key], depth + 1);\n        let s = `\"${key}\": ${o}, `;\n        out.push(s.padStart(s.length + (depth + 1) * 4));\n      }\n      out[out.length - 1] = out[out.length - 1].slice(0, -1);\n    }\n    out.push(\"}\".padStart(1 + depth * 4, \" \"));\n  } else {\n    if (output.type === \"string\") {\n      return `\"${output.value}\"`;\n    } else if (output.type === \"number\") {\n      return `${output.value}`;\n    }\n    return output.value;\n  }\n  return out;\n}\n\nfunction App() {\n  let ref = createRef();\n  let [input, setInput] = useState();\n  let [output, setOutput] = useState();\n\n  useEffect(() => {\n    try {\n      let processed = processInput(JSON.parse(input));\n      console.log(processed);\n      setOutput(buildOutput(processed).join(\"\\n\"));\n    } catch (err) {\n      // console.log(\"Not valid JSON\", err);\n      setOutput(\"Please enter a valid JSON string\");\n    }\n  }, [input]);\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <Grid columns={2}>\n          <Grid.Row>\n            <Grid.Column>\n              <Form>\n                <TextArea\n                  rows={30}\n                  placeholder=\"Enter JSON\"\n                  onChange={(e, d) => setInput(d.value)}\n                  ref={ref}\n                />\n              </Form>\n            </Grid.Column>\n            <Grid.Column>\n              <Form>\n                <TextArea rows={30} placeholder=\"Tell us more\" value={output} />\n              </Form>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}